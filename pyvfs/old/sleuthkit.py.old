#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright 2013 The PyVFS Project Authors.
# Please see the AUTHORS file for details on individual authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""This file contains the class to get a pyVFS file from an image using TSK."""

# TODO: have a generic read-ahead/cached file-like object reader?


# TODO: MERGE CLASSES INTO A SINGLE ONE!!!!
class TSKFile(object):
  """Class that simulates most of the methods of a read-only file object."""
  MIN_READSIZE = 1024 * 1024

  def __init__(self, filesystem, inode, path):
    self.readahead = ''
    self.next_read_offset = 0

  # Deviate from the naming convention since we are implementing an interface.
  def read(self, read_size=None):
    """Provide a read method for the file object.

    Args:
      read_size: An integer indicating the number of bytes to read.

    Returns:
      The content from the file, from the current offset and for read_size
      bytes.

    Raises:
      IOError: if no read_size is passed on.
    """
    if read_size is None:
      # Check file size and read within "reasonable" limits.
      if self.size - self.tell() < 1024 * 1024 * 24:
        read_size = self.size - self.tell()
      else:
        read_size = 1024 * 1024 * 24
        logging.debug(('Trying to read unbound size. Read size limited to the'
                       'maximum size of 24Mb . Size of file: %d, and current'
                       ' position in it: %d'), self.size, self.tell())

    if read_size <= len(self.readahead):
      data = self.readahead[:read_size]
      self.readahead = self.readahead[read_size:]
    else:
      data = self.readahead
      self.readahead = ''
      read_size -= len(data)
      read_now_size = min(self.size - self.tell(),
                          read_size + self.MIN_READSIZE)
      if read_now_size < 0:
        return data
      try:
        buf = self.fileobj.read_random(self.next_read_offset, read_now_size)
        self.next_read_offset += len(buf)
        self.readahead = buf[read_size:]
        data += buf[:read_size]
      except IOError:
        return data

    return data
